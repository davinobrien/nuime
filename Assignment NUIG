#define _CRT_SECURE_NO_WARNINGS
#include "stdafx.h"
#include <stdio.h>
#include "string.h"
#include "stdlib.h"

struct date
{
	int day, month, year;
};

struct record
{
	struct date orderDate;
	char region[20];
	char rep[20];
	char item[20];
	int units;
	float unitCost;
	float totalCost;
};

int nrecords = 0;
struct record records[501];
int readFile(char *fileName);
void findByRegion(char *region);
void findByRep(char *rep);
void findByItem(char *item);
void findByYear(int year);

int getOption();

void main()
{
	char string[20];
	char fileName[] = "C:\\sample text.txt";
	int i = 0;
	int option, year;
	char temp[20];

	if (!readFile(fileName))
	{
		printf("File could not be opened !!\n");
		return;
	}
	option = getOption();


	while (option != 0)
	{
	switch (option)
	{
	case 1:
	puts("Enter Region");
	gets_s(temp);
	findByRegion(temp);
	break;
	case 2:
	puts("Enter Rep");
	gets_s(temp);
	findByRep(temp);
	break;
	case 3:
	puts("Enter Item");
	gets_s(temp);
	findByItem(temp);
	break;
	case 4:
	puts("Enter Year");
	gets_s(temp);
	year = atoi(temp);
	findByYear(year);
	break;
	}
	option = getOption();

	}
	
}

int readFile(char *fileName)
{
	FILE *fp;
	char dump[200];
	char strBuff[80];
	char* value;



	int i = 0, j = 0;

	fp = fopen(fileName, "r");


	fgets(dump, 80, fp);

	fgets(strBuff, 80, fp);


	while (fgets(strBuff, 80, fp)!= NULL) {
			value = strtok(strBuff, "/");
			records[i].orderDate.month = atoi(value);

			value = strtok(NULL, "/");
			records[i].orderDate.day = atoi(value);

			value = strtok(NULL, "\t");
			records[i].orderDate.year = atoi(value);

			value = strtok(NULL, "\t");
			strcpy(records[i].region, value);

			value = strtok(NULL, "\t");
			strcpy(records[i].rep, value);

			value = strtok(NULL, "\t");
			strcpy(records[i].item, value);

			value = strtok(NULL, "\t");
			records[i].units = atoi(value);

			value = strtok(NULL, "\t");
			records[i].unitCost = atof(value);

			value = strtok(NULL, "\n");
			records[i].totalCost = atof(value);

			i++;

			nrecords++;


		}

		fclose(fp);
	

	return 1;
}


void findByRegion(char *region)
{
	int i = 0;
	float total = 0.0;

	for (i = 0; i<nrecords; i++)
	{
		if (!strcmp(records[i].region, region))
		{
			total = total + records[i].totalCost;
		}

	}
	printf("Sales for region: %s = %.2f\n", region, total);
}

void findByRep(char *rep)
{
	int i = 0;
	float total = 0.0;

	for (i = 0; i<nrecords; i++)
	{
		if (!strcmp(records[i].rep, rep))
		{
			total = total + records[i].totalCost;
		}
	}
	printf("Sales for rep: %s = %.2f\n", rep, total);

}

void findByItem(char *item)
{
	int i = 0;
	float total = 0.0;

	for (i = 0; i<nrecords; i++)
	{
		if (!strcmp(records[i].item, item))
		{
			total = total + records[i].totalCost;
		}
	}
	printf("Sales for item: %s = %.2f\n", item, total);
}

void findByYear(int year)
{
	int i = 0;
	float total = 0.0;
	

	for (i = 0; i < nrecords; i++)
	{
		if (year > 2000)
		{
			year = year - 2000;
		}
		if (year==records[i].orderDate.year)
		{

			total = total + records[i].totalCost;
		}
		
	}
	printf("Sales for year: %s = %.2f\n", year, total);
}


int getOption()
{
	int option = 0;
	char inp[3];

	puts("Enter one of the follow options:");
	puts("1 - sales by region");
	puts("2 - sales by rep");
	puts("3 - sales by item");
	puts("4 - sales by year");
	puts("0 - quit");
	gets_s(inp);
	option = atoi(inp);

	return option;
}

